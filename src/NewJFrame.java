
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.net.URI;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.embed.swing.JFXPanel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaPlayer.Status;
//import javax.swing.JOptionPane;
import javafx.util.*;
//import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.TimeZone;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Adam Gregory
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        hideButton();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        browseWavButton = new javax.swing.JButton();
        selectWavLabel = new javax.swing.JLabel();
        fileWavLabel = new javax.swing.JLabel();
        selectTimedLabel = new javax.swing.JLabel();
        browseTimedButton = new javax.swing.JButton();
        fileTimedLabel = new javax.swing.JLabel();
        startTimeLabel = new javax.swing.JLabel();
        startTimeField = new javax.swing.JFormattedTextField();
        startTimeButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        fwd20Button = new javax.swing.JButton();
        prevButton = new javax.swing.JButton();
        back20Button = new javax.swing.JButton();
        descriptionLabel = new javax.swing.JLabel();
        someDescLabel = new javax.swing.JLabel();
        slashLabel = new javax.swing.JLabel();
        totalDescLabel = new javax.swing.JLabel();
        prerollLabel = new javax.swing.JLabel();
        prerollField = new javax.swing.JTextField();
        prerollSetButton = new javax.swing.JButton();
        prerollSetField = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descTextArea = new javax.swing.JTextArea();
        currDescLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        currTimeLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 375));

        browseWavButton.setText("Browse");
        browseWavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseWavButtonActionPerformed(evt);
            }
        });

        selectWavLabel.setText("Select wav file:");

        fileWavLabel.setText("...");

        selectTimedLabel.setText("Select timed text:");

        browseTimedButton.setText("Browse");
        browseTimedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseTimedButtonActionPerformed(evt);
            }
        });

        fileTimedLabel.setText("...");

        startTimeLabel.setText("Start Time from VLin:");

        startTimeField.setColumns(7);
        startTimeField.setText("00:58:30:00");
        startTimeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimeFieldActionPerformed(evt);
            }
        });

        startTimeButton.setText("Load Start Times");
        startTimeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTimeButtonActionPerformed(evt);
            }
        });

        pauseButton.setText("Play / Pause");
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        fwd20Button.setText("Fwd 20");
        fwd20Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fwd20ButtonActionPerformed(evt);
            }
        });

        prevButton.setText("Previous");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        back20Button.setText("Back 20");
        back20Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back20ButtonActionPerformed(evt);
            }
        });

        descriptionLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        descriptionLabel.setText("Current Description:");

        someDescLabel.setText("...");

        slashLabel.setText("/");

        totalDescLabel.setText("...");

        prerollLabel.setText("Preroll (in whole seconds):");

        prerollField.setColumns(2);
        prerollField.setText("1");

        prerollSetButton.setText("Set");
        prerollSetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prerollSetButtonActionPerformed(evt);
            }
        });

        prerollSetField.setText("Default (1)");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Value:");

        descTextArea.setEditable(false);
        descTextArea.setColumns(20);
        descTextArea.setLineWrap(true);
        descTextArea.setRows(4);
        descTextArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(descTextArea);

        currDescLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        currDescLabel.setText("Current Description Text:");

        titleLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 48)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        titleLabel.setText("WavRunner");

        currTimeLabel.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectWavLabel)
                        .addGap(21, 21, 21)
                        .addComponent(browseWavButton)
                        .addGap(18, 18, 18)
                        .addComponent(fileWavLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectTimedLabel)
                            .addComponent(startTimeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(startTimeButton)
                                    .addComponent(fileTimedLabel)))
                            .addComponent(browseTimedButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(back20Button)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(prevButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pauseButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nextButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fwd20Button))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(prerollLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(prerollField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(prerollSetButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(prerollSetField)))
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(descriptionLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(someDescLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(slashLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalDescLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(currTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(37, 37, 37)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(currDescLabel)))
                    .addComponent(titleLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(browseWavButton)
                            .addComponent(selectWavLabel)
                            .addComponent(fileWavLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectTimedLabel)
                            .addComponent(browseTimedButton)
                            .addComponent(fileTimedLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startTimeLabel)
                            .addComponent(startTimeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startTimeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(prerollLabel)
                            .addComponent(prerollField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(prerollSetButton)
                            .addComponent(prerollSetField)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(descriptionLabel)
                            .addComponent(someDescLabel)
                            .addComponent(slashLabel)
                            .addComponent(totalDescLabel)
                            .addComponent(currTimeLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(pauseButton)
                            .addComponent(back20Button)
                            .addComponent(prevButton)
                            .addComponent(fwd20Button)
                            .addComponent(nextButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(currDescLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void hideButton() {
        startTimeButton.setVisible(false);
    }
    
    class TimeListener implements PropertyChangeListener {
        public void propertyChange(PropertyChangeEvent e) {
            Object source = e.getSource();
            currDescLabel.setText(source.toString());
        }
    }
    
    // wavPath available to browse and play buttons
    String wavPath;
    Media hit;
    MediaPlayer mediaPlayer;
    private void browseWavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseWavButtonActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "WAV file", "wav");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(null);
        File wavFile = fc.getSelectedFile();
        URI path = wavFile.toURI();
        wavPath = path.toString();
        String fileName = fc.getName(wavFile);
        fileWavLabel.setText(fileName);
        //Initialize MediaPlayer instance
        JFXPanel forToolkit = new JFXPanel();
        hit = new Media(wavPath);
        mediaPlayer = new MediaPlayer(hit);
        mediaPlayer.addPropertyChangeListener("currentTime", new TimeListener());
    }//GEN-LAST:event_browseWavButtonActionPerformed

    
    
    String textPath;
    BufferedReader bufRead;
    private void browseTimedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseTimedButtonActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "TEXT file", "txt");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(null);
        File textFile = fc.getSelectedFile();
        try {
            FileReader timedText = new FileReader(textFile);
            bufRead = new BufferedReader(timedText);
            //Get filename and display in GUI
            URI path = textFile.toURI();
            textPath = path.toString();
            String fileName = fc.getName(textFile);
            fileTimedLabel.setText(fileName);
            //reveal button to calculate start times
            startTimeButton.setVisible(true);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_browseTimedButtonActionPerformed
    
    Date startTime;
    List<Double> inTimes = new ArrayList<>();
    List<String> descText = new ArrayList<>();
    int arrayPosition = 0;
    private void startTimeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimeButtonActionPerformed
        //Parsing timecode strings to dates and calculating milliseconds
        //http://stackoverflow.com/questions/8826270/how-to-convert-hhmmss-sss-to-milliseconds
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        try {
            //Retrieve startTimeField value and convert to milliseconds:
            //JOptionPane.showMessageDialog(this, startTimeField.getText());
            startTime = sdf.parse("1970-01-01 " + startTimeField.getText());
        } catch (ParseException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        String myLine = null;
        
        try {
            // Comparing loopCycle and currentCycle determines what block of text
            // the 'dumb' while loop is currently working through. 
            int loopCycle = 0;
            int currentCycle = 1;
            // This StringBuilder object combines all the lines of text for a 
            // given block.
            StringBuilder currentDescText = new StringBuilder();
            while ((myLine = bufRead.readLine()) != null) {
                if (myLine.isEmpty()) {
                    continue;
                } else {
                    // Is this line a timecode line?
                    Pattern digPattern = Pattern.compile("\\d");
                    // Is this line a description line?
                    Pattern wordPattern = Pattern.compile(".*[a-zA-Z].*");
                    if (digPattern.matcher(myLine.substring(1,2)).matches()) {
                        String time = myLine.substring(1, 9);
                        //Converting 29 frames/sec to milliseconds (somewhat roughly)
                        int frames = Integer.parseInt(myLine.substring(9, 11));
                        double millisFromFrames = frames * 34;
                        Date myTime = sdf.parse("1970-01-01 " + time);
                        //Added milliseconds computed from frames to total milliseconds parsed from timecode
                        double resolvedTime = (myTime.getTime() + millisFromFrames) - startTime.getTime();
                        inTimes.add(resolvedTime);
                        loopCycle = loopCycle + 1;
                    }
                    if (wordPattern.matcher(myLine).matches()) {
                        if (currentCycle == loopCycle) {
                            currentDescText.append(myLine).append(" ");
                        } else if (currentCycle != loopCycle) {
                            descText.add(currentDescText.toString());
                            currentDescText = new StringBuilder();
                            currentDescText.append(myLine);
                            currentCycle = currentCycle + 1;
                        }
                    }                     
                 }
            }
            // Add last description to list after reaching end of txt doc
            descText.add(currentDescText.toString());
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        startTimeButton.setText("Loaded Successfully");
        String totalDesc = Integer.toString(inTimes.size());
        totalDescLabel.setText(totalDesc);
        someDescLabel.setText(Integer.toString(arrayPosition + 1));
    }//GEN-LAST:event_startTimeButtonActionPerformed

    private void startTimeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTimeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startTimeFieldActionPerformed
    
    private void fwd20ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fwd20ButtonActionPerformed
        //Go ahead 20 descriptions or to last if less than 20 to end
        if (arrayPosition > inTimes.size() - 20) {
            arrayPosition = inTimes.size() - 1;
        } else {
            arrayPosition = arrayPosition + 20;
        }
        Duration seekVal = Duration.millis(inTimes.get(arrayPosition) - preroll);
        mediaPlayer.seek(seekVal);
        mediaPlayer.play();
        someDescLabel.setText(Integer.toString(arrayPosition + 1));
        descTextArea.setText(descText.get(arrayPosition));
    }//GEN-LAST:event_fwd20ButtonActionPerformed

    private void back20ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back20ButtonActionPerformed
        //Go back 20 descriptions or to first description if less than 20 to beginning
        if (arrayPosition < 20) {
            arrayPosition = arrayPosition - arrayPosition;
        } else {
            arrayPosition = arrayPosition - 20;
        }
        Duration seekVal = Duration.millis(inTimes.get(arrayPosition) - preroll);
        mediaPlayer.seek(seekVal);
        mediaPlayer.play();
        someDescLabel.setText(Integer.toString(arrayPosition + 1));
        descTextArea.setText(descText.get(arrayPosition));
    }//GEN-LAST:event_back20ButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        //Play / Pause playback
        if (mediaPlayer.getStatus() == Status.PLAYING) {
            mediaPlayer.pause();
        }
        if (mediaPlayer.getStatus() == Status.PAUSED) {
            mediaPlayer.play();
        }
        if (mediaPlayer.getStatus() == Status.STOPPED) {
            mediaPlayer.play();
        }
        if (mediaPlayer.getStatus() == Status.HALTED) {
            mediaPlayer.play();
        }
        if (mediaPlayer.getStatus() == Status.READY) {
            mediaPlayer.play();
        }
    }//GEN-LAST:event_pauseButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed

        //Play next time in List inTimes
        arrayPosition = arrayPosition + 1;
        Duration seekVal = Duration.millis(inTimes.get(arrayPosition) - preroll);
        //JOptionPane.showMessageDialog(null, inTimes.get(2));
        mediaPlayer.seek(seekVal);
        mediaPlayer.play();
        someDescLabel.setText(Integer.toString(arrayPosition + 1));
        descTextArea.setText(descText.get(arrayPosition));
        currTimeLabel.setText(mediaPlayer.getCurrentTime().toString());
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        //Play previous in time; 
        if (arrayPosition > 0) {
            arrayPosition = arrayPosition - 1;
        }
        Duration seekVal = Duration.millis(inTimes.get(arrayPosition) - preroll);
        mediaPlayer.seek(seekVal);
        mediaPlayer.play();
        someDescLabel.setText(Integer.toString(arrayPosition + 1));
        descTextArea.setText(descText.get(arrayPosition));
    }//GEN-LAST:event_prevButtonActionPerformed
    int preroll = 1000;
    private void prerollSetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prerollSetButtonActionPerformed
        //Set the preroll value that leads into descriptions
        preroll = Integer.parseInt(prerollField.getText());
        preroll = preroll * 1000;
        prerollSetField.setText(prerollField.getText());
    }//GEN-LAST:event_prerollSetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back20Button;
    private javax.swing.JButton browseTimedButton;
    private javax.swing.JButton browseWavButton;
    private javax.swing.JLabel currDescLabel;
    private javax.swing.JLabel currTimeLabel;
    private javax.swing.JTextArea descTextArea;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JLabel fileTimedLabel;
    private javax.swing.JLabel fileWavLabel;
    private javax.swing.JButton fwd20Button;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JTextField prerollField;
    private javax.swing.JLabel prerollLabel;
    private javax.swing.JButton prerollSetButton;
    private javax.swing.JLabel prerollSetField;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel selectTimedLabel;
    private javax.swing.JLabel selectWavLabel;
    private javax.swing.JLabel slashLabel;
    private javax.swing.JLabel someDescLabel;
    private javax.swing.JButton startTimeButton;
    private javax.swing.JFormattedTextField startTimeField;
    private javax.swing.JLabel startTimeLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel totalDescLabel;
    // End of variables declaration//GEN-END:variables
}